// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

import <decreases/predicate_instance.vpr>

field next: Ref
field val: Int

predicate list(xs: Ref) {
  acc(xs.next) && acc(xs.val) && (xs.next != null ==> acc(list(xs.next)) && xs.next != null)
}

function length(xs: Ref): Int
  decreases list(xs)
  requires acc(list(xs)) && xs != null // (1)
  ensures result > 0
{ unfolding acc(list(xs)) in 1 + (xs.next == null ? 0 : length(xs.next)) } // (1)

function sum(xs: Ref): Int
  decreases list(xs)
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in xs.val + (xs.next == null ? 0 : sum(xs.next)) }

function head(xs: Ref): Int
  decreases
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in xs.val }

function tail(xs: Ref): Ref
  decreases list(xs)
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in xs.next }

function last(xs: Ref): Int
  decreases list(xs)
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in xs.next == null ? xs.val : last(xs.next) }

function contains(xs: Ref, x: Int): Bool
  decreases list(xs)
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in x == xs.val || (xs.next != null && contains(xs.next, x)) }

function elems(xs: Ref): Seq[Int]
  decreases list(xs)
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in Seq(xs.val) ++ (xs.next == null ? Seq[Int]() : elems(xs.next)) }

function get(xs: Ref, index: Int): Int
  decreases list(xs)
  requires acc(list(xs)) && xs != null
  requires 0 <= index && index < length(xs)
  //decreases index
{ unfolding acc(list(xs)) in index == 0 ? xs.val : get(xs.next, index - 1) }

function ascending(xs: Ref): Bool
  decreases list(xs)
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in (xs.next == null || (xs.val <= head(xs.next) && ascending(xs.next))) }